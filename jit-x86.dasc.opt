#include <stdint.h>
#include "util.h"
#include <stdio.h>
|.arch x86
|.actionlist actions
|
|// Use ebx as our cell pointer.
|// Since ebx is a callee-save register, it will be preserved
|// across our calls to getchar and putchar.
|.define PTR, ebx
|

#define Dst &state
#define MAX_NESTING 256

int res_count = 0;

int continuous_count(char *p)
{
    char *ptr = p;
    int count = 0;
    while (*ptr == *p) {
        count++;
        ptr++;
    }
    return count;
}


int check_loops(char *p,int *index,int *mult)
{
    int res=0,offset = 0,_index = 0;
	char *temp_p = p;
    if (*(p+1) != '-') return -1;
    p += 2;
    while (*p != ']') {
        if (*p == '[' || *p == '-' ||
            *p == '.' || *p == ',')
            return -1;
        res = continuous_count(p);
        if (*p == '>') offset += res;
        else if (*p == '<') offset -= res;
        else if (*p == '+') {
			for(int i=0;i <_index;i++)
			{
				if(index[i] == offset)
				{
					mult[i] += res;
					goto L1;
				}	
			}
            index[_index] = offset;
            mult[_index] = res;
			_index++;	
        }
L1:        p += res;
   }
   if (offset != 0) return -1;
	res_count = p - temp_p;
   return _index;
}

int main(int argc, char *argv[])
{
	if (argc < 2) err("Usage: jit-x86 <inputfile>");
	dasm_State *state;
	initjit(&state, actions);

	unsigned int maxpc = 0;
	int pcstack[MAX_NESTING];
	int *top = pcstack, *limit = pcstack + MAX_NESTING;
	int index[255], mult[255], return_value, count;
	// Function prologue.
	|  push ebp
	|  mov  ebp, esp
	|  sub  esp, 8
	|  mov  [ebp - 4], PTR
	|  mov  eax, [ebp + 8]
	|  mov  PTR, eax

	for (char *p = read_file(argv[1]); *p; p++) {
		switch (*p) {
		case '>':
			count = continuous_count(p);
			|  add  PTR, count
			p += (count - 1);
			break;
		case '<':
			count = continuous_count(p);
			|  sub  PTR, count
			p += (count - 1);
			break;
		case '+':
			count = continuous_count(p);
			|  add  byte [PTR], count
			p += (count - 1);
			break;
		case '-':
			count = continuous_count(p);
			|  sub  byte [PTR], count
			p += (count - 1);
			break;
		case '.':
			|  movzx eax, byte [PTR]
			|  mov   [esp], eax
			|  call  &putchar
			break;
		case ',':
			|  call  &getchar
			|  mov   byte [PTR], al
			break;
		case '[':
			if (top == limit) err("Nesting too deep.");
			// Each loop gets two pclabels: at the beginning and end.
			// We store pclabel offsets in a stack to link the loop
			// begin and end together.

			return_value = check_loops(p, index, mult);

			if (return_value == 0){			
				|  mov   byte [PTR], 0
				p += res_count;
				res_count = 0;
			}
			else if(return_value > 0){
				for(int t=0; t < return_value; t++){

					| mov al, [PTR]
					| mov dl, mult[t]
					| mul dl
					| mov edx, index[t]
					| add edx, PTR
					| add byte [edx], al

				}
				| mov  byte [PTR] ,0
				p += res_count;
				res_count = 0;
			}
			else{	
				maxpc += 2;
				*top++ = maxpc;
				dasm_growpc(&state, maxpc);
				|  cmp  byte [PTR], 0
				|  je   =>(maxpc-2)
				|=>(maxpc-1):				
			}
			break;
		case ']':
			if (top == pcstack)
			{
				for(char *i = p-3;i < p+1;i++)
				err("Unmatched ']'");
			}
			top--;
			|  cmp  byte [PTR], 0
			|  jne  =>(*top-1)
			|=>(*top-2):
			break;
		}
	}

	// Function epilogue.
	|  mov  eax, [ebp - 4]
	|  mov  PTR, eax
	|  leave
	|  ret

	void (*fptr)(char*) = jitcode(&state);
	char *mem = calloc(30000, 1);
	fptr(mem);
	free(mem);
	free_jitcode(fptr);
	return 0;
}
